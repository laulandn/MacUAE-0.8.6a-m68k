picasso96.h -> debut#define BitMap  Picasso96BitMap#define Pattern Picasso96Pattern#define planar  Picasso96planar#define chunky  Picasso96chunky /***************************************************************************/Custom .cint rpt_available = 0;void reset_frame_rate_hack (void){#if 0 /* ATB */    if (currprefs.m68k_speed != -1)	return;    if (! rpt_available) {	currprefs.m68k_speed = 0;	return;    }    rpt_did_reset = 1;    is_lastline = 0;    vsyncmintime = read_processor_time() + vsynctime;    write_log ("Resetting frame rate hack\n");#endif}static void vsync_handler (void){    if (currprefs.m68k_speed == -1) {#if 0 /* ATB */	frame_time_t curr_time = read_processor_time ();	vsyncmintime += vsynctime;	/* @@@ Mathias? How do you think we should do this? */	/* If we are too far behind, or we just did a reset, adjust the	 * needed time. */	if ((long int)(curr_time - vsyncmintime) > 0 || rpt_did_reset)	    vsyncmintime = curr_time + vsynctime;	rpt_did_reset = 0;#else	mac_vsync();#endif    }    handle_events ();/***************************************************************************/fpp.c// ATB#pragma optimization_level 2////***************************************************************************/gfxlib.c#define Region UAE_Region // XXX ATBstruct Region {    struct Rectangle bounds;    struct RegionRectangle *RegionRectangle;};/***************************************************************************/main.c -> real_main	parse_cmdline_and_init_file (argc, argv);	Menu_(); /* MacOS */main.c -> parse_cmdline_and_init_file    if (f == NULL) {	// parse_cmdline (argc, argv);	return;    }    fseek (f, 0, SEEK_END);/***************************************************************************/ drawing.c -> debutstatic __inline__ xcolnr uae_mac_convert(xcolnr color); /* XXX,ATB */static __inline__ xcolnr uae_mac_convert(xcolnr color){	return ~color;}LINE_TO_SCR(pfield_linetoscr_8, uae_u8, 0,uae_mac_convert)LINE_TO_SCR(pfield_linetoscr_8_double_slow, uae_u8, 1,uae_mac_convert)FILL_LINE(fill_line_8, uae_u8,uae_mac_convert)/***************************************************************************/memory.c disk.c disk.h pour zlib
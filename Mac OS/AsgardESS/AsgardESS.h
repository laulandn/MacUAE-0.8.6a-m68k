//=================================================================================================////		The Asgard Emulator Sound System for the Macintosh////		A free sound library for high-precision reproduction of emulated sound.////		Written by Aaron Giles//		Version 1.0b5 -- August 8, 1997////=================================================================================================////		What is it?//			The Asgard Emulator Sound System is a low-latency, high-precision sound library geared //			toward providing a simple sound interface for Macintosh emulator authors.////		Why does it exist?//			Because the type of sound processing needed for accurate emulation of earlier-generation//			sound hardware is not a trivial exercise on the Macintosh.////		How can I use it?//			Easy -- the Asgard Emulator Sound System is almost totally free, so you can include it //			in your emulation project -- freeware, shareware, or commercial -- without any legal//			or licensing hassles.////		What do you mean by "almost totally free"?//			All I ask that if you do make use of this code that you give me appropriate credit in //			your about box and documentation, and that you send me a free copy of any products you//			release which make use of the Asgard Emulator Sound System.////		Where do I contact you?//			If you are having any trouble with the library, or need some assistance, feel free to//			send me email: agiles@sirius.com or agiles@aol.com.  If you need a shipping address,//			contact me via email first and I'll give it to you.////=================================================================================================#ifndef __ASGARDESS__#define __ASGARDESS__//=================================================================================================//		Constants//=================================================================================================// built-in samples#define AESS_SQUARE_WAVE_SAMPLE 		((void *)-1)#define AESS_NOISE_SAMPLE 				((void *)-2)// common sample rates#define AESS_SAMPLE_RATE_22kHz		22050#define AESS_SAMPLE_RATE_44kHz		44100	// common volumes#define AESS_MINIMUM_VOLUME			0#define AESS_MAXIMUM_VOLUME			256	// common gains#define AESS_STANDARD_GAIN				256// nicer names for the outputs#define AESS_GENERATE_8BIT				0#define AESS_GENERATE_16BIT			1	// nicer names for interpolation#define AESS_NO_INTERPOLATION			0#define AESS_LINEAR_INTERPOLATION	1	// nicer names for normalization#define AESS_UNNORMALIZED_SAMPLES	0#define AESS_NORMALIZED_SAMPLES		1// nicer names for mixing#define AESS_MIXER_LINEAR				0#define AESS_MIXER_NONLINEAR			1// nicer names for looping#define AESS_NONLOOPED					0#define AESS_LOOPED						1// nicer names for pause/resume#define AESS_RESUME						0#define AESS_PAUSE						1//=================================================================================================//		Structures & Typedefs//=================================================================================================typedef void (*AsgardESS_Fill)(int voice, unsigned char *pData, long count, void *pInfo, void *pUserData);typedef void (*AsgardESS_Fill16)(int voice, short *pData, long count, void *pInfo, void *pUserData);//=================================================================================================//		Function Prototypes//=================================================================================================// initialization/terminationextern OSErr 		AsgardESS_Init						(long frequency, int voices, int sixteenBit, int interpolate, int normalized, int mixer, int gain);extern void			AsgardESS_ResetVoice				(int voice);extern void 		AsgardESS_Term						(void);// post-initialization output controlextern int		 	AsgardESS_Pause					(int pause);extern long			AsgardESS_SetFrequency			(long frequency);extern int			AsgardESS_SetSampleSize			(int sixteenBit);extern int			AsgardESS_SetInterpolated		(int interpolated);extern int			AsgardESS_SetNormalized			(int normalized);extern int			AsgardESS_SetGain					(int gain);extern int			AsgardESS_SetMixer				(int mixer);extern int			AsgardESS_SetMasterVolume		(int newVolume);// buffered sample playingextern int		 	AsgardESS_PlaySample				(int voice, unsigned char *pData, long length, long frequency, int volume, int loop);extern int		 	AsgardESS_PlaySample16			(int voice, short *pData, long length, long frequency, int volume, int loop);extern int		 	AsgardESS_SetSampleFrequency	(int voice, long frequency);extern int		 	AsgardESS_SetSampleVolume		(int voice, int volume);extern void 		AsgardESS_StopSample				(int voice);extern int			AsgardESS_SamplePlaying			(int voice);// waveform sample playingextern int		 	AsgardESS_PlayWaveform			(int voice, unsigned char *pData, long length, long frequency, int volume);extern int		 	AsgardESS_PlayWaveform16		(int voice, short *pData, long length, long frequency, int volume);extern int		 	AsgardESS_SetWaveformFrequency(int voice, long frequency);extern int		 	AsgardESS_SetWaveformVolume	(int voice, int volume);extern void 		AsgardESS_StopWaveform			(int voice);extern int			AsgardESS_WaveformPlaying		(int voice);// streamed sample playingextern int		 	AsgardESS_PlayStreamedSample	(int voice, unsigned char *pData, long length, long frequency, int volume);extern int		 	AsgardESS_PlayStreamedSample16(int voice, short *pData, long length, long frequency, int volume);// buffered sample playing with manual mixingextern int			AsgardESS_PlayManual				(int voice, AsgardESS_Fill pCallback, void *pUserData, long dataSize, long frequency, int volume);extern int			AsgardESS_PlayManual16			(int voice, AsgardESS_Fill16 pCallback, void *pUserData, long dataSize, long frequency, int volume);extern int			AsgardESS_QueueManualData		(int voice, void *pData);#endif